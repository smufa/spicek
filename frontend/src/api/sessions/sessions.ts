/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Hackathon DH API
 * WIP
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreateSessionDto,
  Session,
  SessionControllerCreateDefault,
  UpdateSessionDto,
} from '.././model';

import { customInstance } from '.././mutator/custom-instance';
import type { ErrorType } from '.././mutator/custom-instance';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Create a new session for a user
 */
export const sessionControllerCreate = (
  createSessionDto: CreateSessionDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<SessionControllerCreateDefault>(
    {
      url: `/sessions`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createSessionDto,
      signal,
    },
    options,
  );
};

export const getSessionControllerCreateMutationOptions = <
  TError = ErrorType<SessionControllerCreateDefault>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sessionControllerCreate>>,
    TError,
    { data: CreateSessionDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof sessionControllerCreate>>,
  TError,
  { data: CreateSessionDto },
  TContext
> => {
  const mutationKey = ['sessionControllerCreate'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sessionControllerCreate>>,
    { data: CreateSessionDto }
  > = (props) => {
    const { data } = props ?? {};

    return sessionControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SessionControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof sessionControllerCreate>>
>;
export type SessionControllerCreateMutationBody = CreateSessionDto;
export type SessionControllerCreateMutationError =
  ErrorType<SessionControllerCreateDefault>;

/**
 * @summary Create a new session for a user
 */
export const useSessionControllerCreate = <
  TError = ErrorType<SessionControllerCreateDefault>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof sessionControllerCreate>>,
      TError,
      { data: CreateSessionDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof sessionControllerCreate>>,
  TError,
  { data: CreateSessionDto },
  TContext
> => {
  const mutationOptions = getSessionControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Returns all user sesssion
 */
export const sessionControllerFindAll = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Session[]>(
    { url: `/sessions`, method: 'GET', signal },
    options,
  );
};

export const getSessionControllerFindAllQueryKey = () => {
  return [`/sessions`] as const;
};

export const getSessionControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof sessionControllerFindAll>>,
  TError = ErrorType<Session[]>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof sessionControllerFindAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSessionControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof sessionControllerFindAll>>
  > = ({ signal }) => sessionControllerFindAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof sessionControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SessionControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof sessionControllerFindAll>>
>;
export type SessionControllerFindAllQueryError = ErrorType<Session[]>;

export function useSessionControllerFindAll<
  TData = Awaited<ReturnType<typeof sessionControllerFindAll>>,
  TError = ErrorType<Session[]>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof sessionControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof sessionControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof sessionControllerFindAll>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSessionControllerFindAll<
  TData = Awaited<ReturnType<typeof sessionControllerFindAll>>,
  TError = ErrorType<Session[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof sessionControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof sessionControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof sessionControllerFindAll>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSessionControllerFindAll<
  TData = Awaited<ReturnType<typeof sessionControllerFindAll>>,
  TError = ErrorType<Session[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof sessionControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Returns all user sesssion
 */

export function useSessionControllerFindAll<
  TData = Awaited<ReturnType<typeof sessionControllerFindAll>>,
  TError = ErrorType<Session[]>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof sessionControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSessionControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update a session by id
 */
export const sessionControllerUpdate = (
  id: string,
  updateSessionDto: UpdateSessionDto,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/sessions/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateSessionDto,
    },
    options,
  );
};

export const getSessionControllerUpdateMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sessionControllerUpdate>>,
    TError,
    { id: string; data: UpdateSessionDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof sessionControllerUpdate>>,
  TError,
  { id: string; data: UpdateSessionDto },
  TContext
> => {
  const mutationKey = ['sessionControllerUpdate'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sessionControllerUpdate>>,
    { id: string; data: UpdateSessionDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return sessionControllerUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SessionControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof sessionControllerUpdate>>
>;
export type SessionControllerUpdateMutationBody = UpdateSessionDto;
export type SessionControllerUpdateMutationError = ErrorType<void>;

/**
 * @summary Update a session by id
 */
export const useSessionControllerUpdate = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof sessionControllerUpdate>>,
      TError,
      { id: string; data: UpdateSessionDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof sessionControllerUpdate>>,
  TError,
  { id: string; data: UpdateSessionDto },
  TContext
> => {
  const mutationOptions = getSessionControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete a session by id
 */
export const sessionControllerDelete = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/sessions/${id}`, method: 'DELETE' },
    options,
  );
};

export const getSessionControllerDeleteMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sessionControllerDelete>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof sessionControllerDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['sessionControllerDelete'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sessionControllerDelete>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return sessionControllerDelete(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SessionControllerDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof sessionControllerDelete>>
>;

export type SessionControllerDeleteMutationError = ErrorType<void>;

/**
 * @summary Delete a session by id
 */
export const useSessionControllerDelete = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof sessionControllerDelete>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof sessionControllerDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getSessionControllerDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
